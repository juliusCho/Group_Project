package com.chain.sjl.article;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.chain.sjl.member.FileVO;
import com.chain.sjl.member.MemberVO;

import net.coobird.thumbnailator.Thumbnails;

@RestController
@RequestMapping("article/{mem_no}")
public class ArticleController {

	private static final Logger logger = LoggerFactory.getLogger(ArticleController.class);
	
	@Value("${article.url}")
	private String articleUrl;
	
	@Autowired
	private ListArticleDivision listDivision;
	
	@Autowired
	private ArticleService articleService;
	
	@RequestMapping("/")
	public ModelAndView main(HttpSession session) {
		session.setAttribute("access", "no");
		return new ModelAndView("article/list");
	}
	
	@RequestMapping(value="listArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public List<ArticleVO> listArticle(@PathVariable long mem_no, @RequestParam int moreArtBtnNo) throws Exception {
		return listDivision.listArticle(mem_no, moreArtBtnNo);
	}
	
	@RequestMapping(value="checkArtLike", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int checkArtLike(@RequestParam long art_no, @PathVariable long mem_no) throws Exception {
		ArticleVO articleVO = new ArticleVO();
		articleVO.setArt_no(art_no);
		articleVO.setMem_no(mem_no);
		return articleService.checkArtLike(articleVO);
	}
	
	@RequestMapping(value="insertImg", method=RequestMethod.GET)
	public ModelAndView insertImg() {
		return new ModelAndView("article/insertImg");
	}
	
	@RequestMapping(value = "insertImg", method = RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	@ResponseBody
	public Map<String, String> insertImg(@ModelAttribute FileVO fileVO, HttpSession session) throws IOException {
		Map<String, String> map = new HashMap<String, String>();
		CommonsMultipartFile cmf = fileVO.getUpFile();
		if (cmf == null) {
			map.put("imageName", "fail");
			return map;
		}
		if (cmf.getSize() > 50000000) {
			map.put("imageName", "exceeded");
			return map;
		}
		boolean isImage = cmf.getContentType().substring(0, 6).toLowerCase().equals("image/");
		if (!isImage) {
			map.put("imageName", "notImg");
			return map;
		}
		String imageName = cmf.getOriginalFilename();
		String extention = imageName.substring(imageName.lastIndexOf(".") + 1);
		
		File file = new File(articleUrl, imageName);
		try {
			cmf.transferTo(file);
		} catch (FileNotFoundException e) {
			createImgDir();
			cmf.transferTo(file);
		} catch (Exception e) {
			e.printStackTrace();
		}
		MemberVO memberVO = (MemberVO) session.getAttribute("memberInfo");

		File thum = new File(articleUrl + "/img_" + memberVO.getMem_no() + "_" + imageName);
        if(isImage) {
            Thumbnails.of(file).size(500, 1000).outputFormat(extention).toFile(thum);
        }
        file.delete();
        map.put("url", "./inputPic/img_" + memberVO.getMem_no() + "_" + imageName);
		map.put("imageName", "img_" + imageName);
		return map;
	}
	private void createImgDir() {
		File dir = new File(articleUrl);
		if(!dir.exists()) {
			dir.mkdirs();
		}
	}
	
	@RequestMapping(value="insertArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int insertArticle(@ModelAttribute ArticleVO articleVO) throws Exception {
		return articleService.insertArticle(articleVO);
	}
	
	@RequestMapping(value="updateArticle", method=RequestMethod.GET)
	public ModelAndView updateArticle() {
		return new ModelAndView("article/update");
	}
	
	@RequestMapping(value="getArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public ArticleVO getArticle(@RequestParam long art_no) throws Exception {
		ArticleVO articleVO = new ArticleVO();
		articleVO = articleService.getArticle(art_no);
		return articleVO;
	}
	
	@RequestMapping(value="updateArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int updateArticle(@ModelAttribute ArticleVO articleVO) throws Exception {
		return articleService.updateArticle(articleVO);
	}
	
	@RequestMapping(value="deleteArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int deleteArticle(@RequestParam long art_no) throws Exception {
		return articleService.deleteArticle(art_no);
	}
	
	@RequestMapping(value="likeArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int likeArticle(@RequestParam long art_no, @PathVariable long mem_no) throws Exception {
		ArticleVO articleVO = new ArticleVO();
		articleVO.setArt_no(art_no);
		articleVO.setMem_no(mem_no);
		return articleService.likeArticle(articleVO);
	}
	
	@RequestMapping(value="hateArticle", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int hateArticle(@RequestParam long art_no, @PathVariable long mem_no) throws Exception {
		ArticleVO articleVO = new ArticleVO();
		articleVO.setArt_no(art_no);
		articleVO.setMem_no(mem_no);
		return articleService.hateArticle(articleVO);
	}
	
	
	
//	==================================댓글==================================
	
	@RequestMapping(value="{art_no}", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public List<CommentVO> listComment(@PathVariable long art_no, @RequestParam int moreComBtnNo) throws Exception {
		return listDivision.listComment(art_no, moreComBtnNo);
	}
	
	@RequestMapping(value="{art_no}/checkComLike", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int checkComLike(@PathVariable long art_no, @PathVariable long mem_no,
			@RequestParam long com_no) throws Exception {
		CommentVO commentVO = new CommentVO();
		commentVO.setArt_no(art_no);
		commentVO.setCom_no(com_no);
		commentVO.setMem_no(mem_no);
		return articleService.checkComLike(commentVO);
	}
	
	@RequestMapping(value="{art_no}/insertComment", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int insertComment(@ModelAttribute CommentVO commentVO) throws Exception {
		return articleService.insertComment(commentVO);
	}
	
	@RequestMapping(value="{art_no}/updateComment", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int updateComment(@ModelAttribute CommentVO commentVO) throws Exception {
		return articleService.updateComment(commentVO);
	}
	
	@RequestMapping(value="{art_no}/deleteComment", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int deleteComment(@PathVariable long art_no, @RequestParam long com_no) throws Exception {
		CommentVO commentVO = new CommentVO();
		commentVO.setArt_no(art_no);
		commentVO.setCom_no(com_no);
		return articleService.deleteComment(commentVO);
	}
	
	@RequestMapping(value="{art_no}/likeComment", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int likeComment(@PathVariable long art_no, @RequestParam long com_no,
			@PathVariable long mem_no) throws Exception {
		CommentVO commentVO = new CommentVO();
		commentVO.setArt_no(art_no);
		commentVO.setCom_no(com_no);
		commentVO.setMem_no(mem_no);
		return articleService.likeComment(commentVO);
	}
	
	@RequestMapping(value="{art_no}/hateComment", method=RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public int hateComment(@PathVariable long art_no, @RequestParam long com_no,
			@PathVariable long mem_no) throws Exception {
		CommentVO commentVO = new CommentVO();
		commentVO.setArt_no(art_no);
		commentVO.setCom_no(com_no);
		commentVO.setMem_no(mem_no);
		return articleService.hateComment(commentVO);
	}
}
