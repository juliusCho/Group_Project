package com.chain.sjl.member;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import net.coobird.thumbnailator.Thumbnails;

@RestController
@RequestMapping("user/{mem_no}")
public class UserController {
	private static Logger logger= LoggerFactory.getLogger(UserController.class);
	
	@Value("${thumbnailUser.url}")
	private String thumbnailUrl;
	
	@Autowired
	private MemberService userService;
	
	@RequestMapping(value="confirm_pw", method=RequestMethod.GET)
	public ModelAndView confirm_pw(@PathVariable long mem_no){
		return new ModelAndView("user/confirm_pw","mem_no",mem_no);
	}
	
	@RequestMapping(value="confirm_member_pw", method=RequestMethod.POST,
			headers="Accept=application/json;charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	@ResponseBody
	public MemberVO confirm_pw_submit(@ModelAttribute MemberVO memberVO) throws Exception{
		memberVO = userService.confirm_pw_submit(memberVO);
		return memberVO;
	}
	
	@RequestMapping(value="mypage", method=RequestMethod.POST)
	public ModelAndView myPage(@ModelAttribute MemberVO memberVO) {
		if(memberVO.getMem_pic() == null) {
			memberVO.setMem_pic("");
		}
		return new ModelAndView("user/mypage","memberInfo",memberVO);
	}
	
	@RequestMapping(value="update", method=RequestMethod.POST)
	public ModelAndView myPageAction(@ModelAttribute MemberVO memberVO) {
		if(memberVO.getMem_pic() == null) {
			memberVO.setMem_pic("");
		}
		String phone,phone1,phone2,phone3;
		String email,email1,email2;
		phone = phone1 = phone2 = phone3 = "";
		email = email1 = email2 = "";
		ModelAndView mav = new ModelAndView("user/update");
		
		if(memberVO.getMem_country() == 0) {
			phone = memberVO.getMem_phone();
			phone1 = phone.substring(0,3);
			
			for(int i=4; i<phone.length(); i++){
				if(phone.substring(i,i+1).equals("-")) {
					phone2 = phone.substring(4, i);
					phone3 = phone.substring(i+1,phone.length());
				}
			}
			email= memberVO.getMem_email();
			for(int i=0; i<email.length(); i++){
				if(email.substring(i, i+1).equals("@")){
					email1 =email.substring(0, i);
					email2 =email.substring(i+1, email.length());
				}
			}
		}
		mav.addObject("phone1",phone1);
		mav.addObject("phone2",phone2);
		mav.addObject("phone3",phone3);
		mav.addObject("email1",email1);
		mav.addObject("email2",email2);
		mav.addObject("memberVO",memberVO);
		return mav;
	}
	
	@RequestMapping(value = "nickCheck", method = RequestMethod.POST, 
			headers = "Accept=application/json; charset=UTF-8", 
			produces = {MediaType.APPLICATION_JSON_UTF8_VALUE })
	@ResponseBody
	public Map<String, String> nickCheck(@RequestParam String nick, HttpSession session) throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		MemberVO memberVO = (MemberVO)session.getAttribute("memberInfo");
		if(memberVO.getMem_nick().equals(nick)) map.put("nick", "same");
		else map.put("nick", userService.nickCheck(nick));
		return map;
	}
	
	@RequestMapping(value="insertPic", method=RequestMethod.GET)
	public ModelAndView insertPic() {
		return new ModelAndView("user/insertPic");
	}

	@RequestMapping(value = "insertPic", method = RequestMethod.POST,
			headers="Accept=application/json; charset=UTF-8",
			produces={MediaType.APPLICATION_JSON_UTF8_VALUE})
	public Map<String, String> insertPic(@ModelAttribute FileVO fileVO, HttpSession session) throws IOException {
		Map<String, String> map = new HashMap<String, String>();
		CommonsMultipartFile cmf = fileVO.getUpFile();
		
		if (cmf == null) {
			map.put("imageName", "fail");
			return map;
		}
		if (cmf.getSize() > 10485760) {
			map.put("imageName", "exceeded");
			return map;
		}
		boolean isImage = cmf.getContentType().substring(0, 6).toLowerCase().equals("image/");
		if (!isImage) {
			map.put("imageName", "notImg");
			return map;
		}
		String imageName = cmf.getOriginalFilename();
		String extention = imageName.substring(imageName.lastIndexOf(".") + 1);
		
		File file = new File(thumbnailUrl, imageName);
		try {
			cmf.transferTo(file);
		} catch (FileNotFoundException e) {
			createThumbDir();
			cmf.transferTo(file);
		} catch (Exception e) {
			e.printStackTrace();
		}
		MemberVO memberVO = (MemberVO) session.getAttribute("memberInfo");

		File thum = new File(thumbnailUrl + "/thumb_" + memberVO.getMem_no() + "_" + imageName);
        if(isImage) {
            Thumbnails.of(file).size(150, 150).outputFormat(extention).toFile(thum);
        }
        file.delete();
        map.put("url", "../../member/inputPic/thumb_" + memberVO.getMem_no() + "_" + imageName);
		map.put("imageName", "thumb_" + imageName);
		return map;
	}
	private void createThumbDir() {
		File dir = new File(thumbnailUrl);
		if(!dir.exists()) {
			dir.mkdirs();
		}
	}
	
	@RequestMapping(value = "updateFinal", method = RequestMethod.POST)
	public ModelAndView updateFinal(@ModelAttribute MemberVO memberVO, @RequestParam String phone1,
			@RequestParam String phone2, @RequestParam String phone3, @RequestParam String email1,
			@RequestParam String email2, @RequestParam String pw, HttpSession session) throws Exception {

		memberVO.setMem_phone(phone1 + "-" + phone2 + "-" + phone3);
		memberVO.setMem_pw(pw);
		memberVO.setMem_email(email1 + "@" + email2);
		
		int result = userService.updateFinal(memberVO);
		ModelAndView mav = new ModelAndView("user/mypage");
		if(result != 0) {
			mav.addObject("memberInfo", memberVO);
			session.setAttribute("memberInfo", memberVO);
		} else {
			mav.addObject("memberInfo", (MemberVO)session.getAttribute("memberInfo"));
		}
		return mav;
	}
}
